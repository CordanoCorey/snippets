{
/*
	 // Place your snippets for TypeScript here. Each snippet is defined under a snippet name and has a prefix, body and 
	 // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	 // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	 // same ids are connected.
	 // Example:
	 "Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	}
*/
	"Route Guard": {
		"prefix": "guard",
		"body": [
			"import { Injectable } from '@angular/core';",
			"import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';",
			"import { Observable } from 'rxjs/Observable';",
			"import 'rxjs/add/observable/of';",
			"",
			"@Injectable()",
			"export class ${1:string}Guard implements CanActivate {",
			"",
			"constructor() { }",
			"",
			"canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> | boolean {",
			"\treturn Observable.of(true);$0",
			"}",
			"}",
			""
		],
		"description": "Router Guard for route definitions"
	},
	"Reducer": {
		"prefix": "reducer",
		"body": [
			"import { Action } from '@caiu/store';",
			"",
			"export function ${1:reducer_name}Reducer(state: ${2:state_type} = new ${2:state_type}(), action: Action): ${2:state_type} {",
			"\tswitch (action.type) {",
			"",
			"\t\tdefault:",
			"\t\t\treturn state;",
			"\t}",
			"}",
			""
		],
		"description": "Redux-style reducer"
	},
	"Constant Reducer": {
		"prefix": "constant-reducer",
		"body": [
			"import { Action } from '@caiu/store';",
			"",
			"export const ${1:string}Reducer: ActionReducer<${2:type}> =",
			"\t(state: ${2:type} = new ${2:type}(), action: Action) => {",
			"",
			"\t\tswitch (action.type) {",
			"",
			"\t\t\tdefault:",
			"\t\t\t\treturn state;",
			"\t\t}",
			"\t};",
			""
		],
		"description": "Redux-style reducer"
	},
	"Models": {
		"prefix": "models",
		"body": [
			"export class ${1:type} {",
			"}",
			"",
			"export class ${1:type}Model {",
			"\t${2:key}: ${1:type} = new ${1:type}();",
			"}",
			"$0"
		],
		"description": "Models file"
	},
	"User Aware Models": {
		"prefix": "umodels",
		"body": [
			"",
			"export class ${1:type} {",
			"}",
			"",
			"export class ${1:type}Model {",
			"\tuser: ${2:user_class};",
			"\t${3:key}: ${1:type} = new ${1:type}();",
			"}",
			"$0"
		],
		"description": "User-aware models file"
	},
	"Collection Model": {
		"prefix": "collection",
		"body": [
			"export class ${1:Type} {",
			"}",
			"",
			"export class ${1:Type}s extends Collection<${1:Type}> {",
			"}",
			"",
			"export class ${1:Type}Model {",
			"$0",
			"\t${2:key}: ${1:Type};",
			"}",
			""
		],
		"description": "Collection models file"
	},
	"User Aware Collection Models": {
		"prefix": "ucollection",
		"body": [
			"import { Collection } from '@caiu/core';",
			"",
			"export class ${1:Type} {",
			"}",
			"",
			"export class ${1:Type}s extends Collection<${1:Type}> {",
			"}",
			"",
			"export class ${1:Type}sModel {",
			"\tuser: ${2:User_Class};",
			"\t${3:key}: ${1:Type}s;",
			"}",
			"$0"
		],
		"description": "User-aware collection models file"
	},
	"Actions": {
		"prefix": "actions",
		"body": [
			"export class ${1:type}Actions {",
			"\tstatic ${2:action_name} = '[${1:type}] ${3:action_description}';$0",
			"}",
			""
		],
		"description": "Static actions class"
	},
	"Selector": {
		"prefix": "selector",
		"body": [
			"export function ${1:selector_Type}Selector(s: ${2:selector_model): ${3:selector_return_type} {",
			"\t$0",
			"}",
			""
		],
		"description": "Models file"
	},
	"Model Selector": {
		"prefix": "modelSelector",
		"body": [
			"export function modelSelector(s: any): ${1:model_type} {",
			"\treturn Object.assign(new ${1:model_type}(), {",
			"\t\t$0",
			"\t});",
			"}",
			""
		],
		"description": "Models file"
	},
	"Http Get": {
		"prefix": "httpget",
		"body": [
			"@HttpGet({",
			"\tpath: '${1:path}',",
			"\tonSuccess: ${2:success_action},",
			"\tonError: ${3:error_action}$0",
			"})"
		],
		"description": "Http Get metadata"
	}
}