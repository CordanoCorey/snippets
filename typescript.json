{
	"Actions": {
		"prefix": "actions",
		"body": [
			"export class ${1:type}Actions {",
			"\tstatic ${2:action_name} = '[${1:type}] ${3:action_description}';$0",
			"}",
			""
		],
		"description": "Static actions class"
	},
	"Collection Model": {
		"prefix": "collection",
		"body": [
			"export class ${1:Type} {",
			"}",
			"",
			"export class ${1:Type}s extends Collection<${1:Type}> {",
			"}",
			"",
			"export class ${1:Type}Model {",
			"$0",
			"\t${2:key}: ${1:Type};",
			"}",
			""
		],
		"description": "Collection models file"
	},
	"Constant Reducer": {
		"prefix": "constant-reducer",
		"body": [
			"import { Action } from '@caiu/store';",
			"",
			"export const ${1:string}Reducer: ActionReducer<${2:type}> =",
			"\t(state: ${2:type} = new ${2:type}(), action: Action) => {",
			"",
			"\t\tswitch (action.type) {",
			"",
			"\t\t\tdefault:",
			"\t\t\t\treturn state;",
			"\t\t}",
			"\t};",
			""
		],
		"description": "Redux-style reducer"
	},
	"Guard": {
		"prefix": "guard",
		"body": [
			"@Injectable()",
			"export class ${1:guard_name}Guard implements CanActivate {",
			"",
			"\tconstructor() { }",
			"",
			"\tcanActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> | boolean {",
			"\t\treturn Observable.of(true);$0",
			"\t}",
			"}",
			""
		],
		"description": "Router Guard for route definitions"
	},
	"Guard - ID": {
		"prefix": "guard-id",
		"body": [
			"@Injectable()",
			"export class ${1:guard_name}Guard implements CanActivate {",
			"",
			"\tconstructor(private store: Store<any>) { }",
			"",
			"\tcanActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> | boolean {",
			"\t\tconst id = parseInt(route.params['${2:key}'], 10);",
			"\t\tthis.store.dispatch(${2:collection}Actions.activate(id));",
			"\t\treturn Observable.of(true);$0",
			"\t}",
			"}",
			""
		],
		"description": "Router Guard for adding route params to the store"
	},
	"Http Get": {
		"prefix": "httpget",
		"body": [
			"@HttpGet({",
			"\tpath: '${1:path}',",
			"\tonSuccess: ${2:success_action},",
			"\tonError: ${3:error_action}$0",
			"})"
		],
		"description": "Http Get metadata"
	},
	"Mapper": {
		"prefix": "mapper",
		"body": [
			"export function map${1:mapper_type}(model: ${2:mapper_model}): ${3:mapper_return_type} {",
			"\t$0",
			"}",
			""
		],
		"description": "Synchronous mapper"
	},
	"Model Selector": {
		"prefix": "modelSelector",
		"body": [
			"export function modelSelector(s: any): ${1:model_type} {",
			"\treturn Object.assign(new ${1:model_type}(), {",
			"\t\t$0",
			"\t});",
			"}",
			""
		],
		"description": "Models file"
	},
	"Models": {
		"prefix": "models",
		"body": [
			"export class ${1:type} {",
			"}",
			"",
			"export class ${1:type}Model {",
			"\t${2:key}: ${1:type} = new ${1:type}();",
			"}",
			"$0"
		],
		"description": "Models file"
	},
	"Observable.combineLatest": {
		"prefix": "combineLatest",
		"body": [
			"Observable.combineLatest(${1:obs1}$, ${2:obs2}$, (${1:obs1}, ${2:obs2}) => (",
			"\tObject.assign(new ${3:return_type}(),",
			"\t\t{",
			"\t\t\t${1:obs1},",
			"\t\t\t${2:obs2}",
			"\t\t}",
			"\t)",
			"));$0"
		],
		"description": "Observable.combineLatest"
	},
	"Observable.merge": {
		"prefix": "merge",
		"body": [
			"Observable.merge(${1:obs1}$, ${2:obs2}$, (${1:obs1}, ${2:obs2}) => (",
			"\t{",
			"\t\t${1:obs1},",
			"\t\t${2:obs2}",
			"\t}",
			"));$0"
		],
		"description": "Observable.merge"
	},
	"Reducer": {
		"prefix": "reducer",
		"body": [
			"import { Action } from '@caiu/store';",
			"",
			"export function ${1:reducer_name}Reducer(state: ${2:state_type} = new ${2:state_type}(), action: Action): ${2:state_type} {",
			"\tswitch (action.type) {",
			"",
			"\t\tdefault:",
			"\t\t\treturn state;",
			"\t}",
			"}",
			""
		],
		"description": "Redux-style reducer"
	},
	"Reducer Reduce": {
		"prefix": "reduce",
		"body": [
			"export function reduce${1:reducer_name}(state: ${3:state_type}, payload: ${2:payload_type}): ${3:state_type} {",
			"\treturn Object.assign(new ${3:state_type}(), state, {",
			"\t\t$0",
			"\t});",
			"}",
			""
		],
		"description": "Redux-style reducer"
	},
	"Reducer Reduce Activate": {
		"prefix": "reduceActivate",
		"body": [
			"export function reduceActivate(state: ${1:state_type}, payload: number | string): ${1:state_type} {",
			"\treturn Object.assign(new ${1:state_type}(), { activeId: payload });",
			"}",
			"$0"
		],
		"description": "Redux-style reducer"
	},
	"Reducer Reduce Collection": {
		"prefix": "reduceCollection",
		"body": [
			"export function reduce${1:reducer_type}s(state: ${1:reducer_type}s, payload: ${1:reducer_type}[]): ${1:reducer_type}s {",
			"\tlet items = payload.reduce((acc: Dictionary<${1:reducer_type}>, item: ${1:reducer_type}) => {",
			"\t\treturn Object.assign({}, acc, { [item.id]: item });",
			"\t}, Object.assign({}, state.items));",
			"\treturn Object.assign(new ${1:reducer_type}s(), state, { items });",
			"}",
			"$0"
		],
		"description": "Redux-style reducer"
	},
	"Reducer Reduce Item": {
		"prefix": "reduceItem",
		"body": [
			"export function reduce${1:reducer_type}(state: ${1:reducer_type}s, action: Action, id?: number): ${1:reducer_type}s {",
			"\tlet item = ${2:reducer}(id ? state.items[id] : state.activeId, action);",
			"\tlet items = Object.assign({}, state.items, { [item.id]: item });",
			"\treturn Object.assign(new ${1:reducer_type}(), state, { items });",
			"}",
			"$0"
		],
		"description": "Redux-style reducer"
	},
	"Reducer Reduce Id": {
		"prefix": "reduceId",
		"body": [
			"export function reduceId(state: ${1:reducer_type}, payload: ${1:reducer_type}): ${1:reducer_type} {",
			"\treturn Object.assign(new ${1:reducer_type}(), state, payload);",
			"}",
			"$0"
		],
		"description": "Redux-style reducer"
	},
	"Selector": {
		"prefix": "selector",
		"body": [
			"export function ${1:selector_type}Selector(s: Store<any>): Observable<${3:selector_return_type}> {",
			"\t$0",
			"}",
			""
		],
		"description": "Asynchronous selector"
	},
	"Custom Selector": {
		"prefix": "cselector",
		"body": [
			"export function ${1:selector_type}Selector(s: Observable<${2:selector_model}>): Observable<${3:selector_return_type}> {",
			"\t$0",
			"}",
			""
		],
		"description": "Asynchronous selector"
	},
	"User Selector": {
		"prefix": "uselector",
		"body": [
			"export function ${1:selector_type}Selector(s: Store<any>): Observable<${3:selector_return_type}> {",
			"\tlet user$ = currentUserSelector(s);",
			"\t$0",
			"}",
			""
		],
		"description": "Asynchronous selector"
	},
	"User Aware Collection Models": {
		"prefix": "ucollection",
		"body": [
			"import { Collection } from '@caiu/core';",
			"",
			"export class ${1:type} {",
			"}",
			"",
			"export class ${1:type}s extends Collection<${1:type}> {",
			"}",
			"",
			"export class ${1:type}sModel {",
			"\tuser: ${2:user_class} = new ${2:user_class}();",
			"\t${3:key}: ${1:type}s;",
			"}",
			"$0"
		],
		"description": "User-aware collection models file"
	},
	"User Aware Models": {
		"prefix": "umodels",
		"body": [
			"",
			"export class ${1:type} {",
			"}",
			"",
			"export class ${1:type}Model {",
			"\tuser: ${2:user_class} = new ${2:user_class}();",
			"\t${3:key}: ${1:type} = new ${1:type}();",
			"}",
			"$0"
		],
		"description": "User-aware models file"
	}
}